package Linkd_List;



public class LIST {

	  ListNode head ; // GLOBAL VARIABLE so can be accessed in any method
	     int size=0;

	public void addFront(int data){
		if(head==null){
			head = new ListNode(data,null);
		}
		else{
			ListNode newlink = new ListNode(data,head);
			head= newlink;                 
			
		}
		size++;
	}
	     
	public void deleteFront(){
		if(head==null) return;

		head = head.Next;
		size--;
	}

	public void deleteEnd(){
		if (head == null) return ;
		ListNode current = head;
		while(current.Next.Next != null){
			current = current.Next;
		}
		current.Next = null;
		size--;
	}
//It takes into one of the element of LinkedList and gives its index.....
	public int search(int data){
		int i = 1;
		ListNode current = head;
	   	while(current!= null){
			if(current.data == data){
				return i;
				
			}
			else{
				i++;
				current = current.Next;
			
		}
		}
		return -1;	
		
		
	}


	public int getElement(int index){
		ListNode current = head;
		if(index==0 || index >size) return -1;
		while(current.Next!=null && index != 1){
			current = current.Next;
			index--;
		}
		return current.data;
		
	}
	public void addRear(int data){
	    	 if(head==null){
	    		 head= new ListNode(data,null);
	    		}

	    	 

	    	 else{
	    	ListNode current = head;
	    	 while(current.Next != null){
	    		 current = current.Next;
	    	 }	 
	    	 
	     	ListNode newlink = new ListNode(data,null);

	    	 current.Next = newlink;
	    	
	    	
	     }
	    	 size++;
	     }
	     
	     
	   
	     
	  public void addAt(int data, int index){
	    	 if (index <1||index >size) return ;
	    	 if(head==null) return;
	    	 if (index ==1) {
	    		 ListNode newlink = new ListNode(data);
	    		 newlink.Next = head;
	    		 head= newlink;
	    	 }
	    	 if(index == size+1){
	    		 addRear(data);
	    	 }
	    	 
	    	
	    	 ListNode current = head;
	    	 for(int i=1; i<index-1 && current.Next != null; i++){
	    		 current = current.Next;
	    	 
	    	 }	 
	    	 
			   ListNode newlink = new ListNode(data,null);
	           
	           newlink.Next =current.Next;
	           current.Next = newlink;
	           current = newlink;
	           
	size++;
	    	 }
	    public int size(){
	    	return size;
	    }
	   

	     
	     public void printList(){
		   ListNode current = head;
		   while(current!= null){
			   System.out.print(current.data+" > ");
			  
			   current = current.Next;
		   }
		   System.out.print("NULL");
	     }  
	     public void printList1(ListNode x){
			   ListNode current = x;
			   while(current!= null){
				   System.out.print(current.data + " > ");
				   
				   current = current.Next;
			   }
			   System.out.print("NULL");
	     }
	     
	   // A question that might be asked or something
	   public ListNode reverselist(){
		   ListNode current = head;
		   ListNode next = null;
		   ListNode previous = null;
		   
		   
		   while(current!= null){
			   next = current.Next;
			   current.Next = previous;
			   previous = current;
			   current = next; 
		  }
	      
		 return  previous;
		 
		   
	   }
//delete a Node when you have access to only that particular node only
	   //This only takes a head node so we have to write a.head.Next.Next...
   public boolean deleteParticularNode(ListNode n){
	   
	   	  
	   if(n == null || n.Next == null) return false;
	   
	   ListNode next = n.Next;
	   n.data  =  next.data;
	   n.Next = next.Next;
	   return true;	   
   }

   //This will take the list and looks for element in the list and if present removes it from the list.
   public boolean deleteNodeatIndex(LIST x, int element){
	   
	   int index= x.search(element);
	   if(index<1 ) return false;
	   int i=1;
	   ListNode current = x.head;
	   while(current != null){
		   if(i == index ){
			   break;
		   }
		   else{
		       i++;
			   current = current.Next;
		   }
	 }
	   
	  ListNode nn = current;
	  ListNode next = nn.Next;
	  nn.data = next.data;
	  nn.Next = next.Next;
	  return true;
   }

   //This method seperates the two list around a value into smaller and larger 
   
   public void seperatearound(LIST a, int data){
	 
	  
	   LIST aa = new LIST();
	   LIST bb = new LIST();
	   
	   ListNode current = a.head;
	   while(current != null){
		   if(current.data < data){
			   aa.addRear(current.data);
			  
		   }
		   
		   else{
			   bb.addRear(current.data);
			

		   }
		   current = current.Next;
	   }
	   bb.printList();
	   
	   System.out.println(" -- ");
	   aa.printList();   
   }
//creating a pallindrome.....
public void ispallindrome(LIST a1){
	if (a1.head ==null ) return ;
	LIST a = a1;
	LIST b = new LIST();
	ListNode current = a.head;
	
	
	while(current != null){
		b.addFront(current.data);
		current = current.Next;
		}
	
	b.printList();
/*	
	
	/*else{
	while(a.head != null && b.head != null){
	ListNode a_current = a.head;
	ListNode b_current = b.head;
		
	if(a_current.data == b_current.data){
		
		
		a_current = a_current.Next;
		b_current = b_current.Next;
          if(a_current ==null && b_current == null){
			       System.out.println("The string is pallindrome");
			       return true;
	}
	}
	else{
		System.out.println("The String is not pallindrome");
		return false;
		
	}
	}
	*/
	

}
}











class ListNode{
	
	int data;
    ListNode Next;

    public ListNode(int data){
    	this.data= data;
    }
    public ListNode(int data, ListNode next){
    	this.data=data;
    	this.Next=next;
    }
    public ListNode(){
    	
    }
    
}
