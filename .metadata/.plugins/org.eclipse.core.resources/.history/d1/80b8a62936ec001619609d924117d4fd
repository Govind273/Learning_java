package Queues;

public class Q_Lnkdlst {

	class Node{
		int data;
		Node next;
		
		Node(int data){
			this.data = data;
			next = null;
		}
		Node(int data, Node next){
			this.data = data;
			this.next = next;
		}
		
		Node(){
			
		}
	}

       Node front;
       Node rear ;
       
       Q_Lnkdlst(){
    	   front = rear = null;
       }
       
       public boolean isEmpty(){
    	   return(front == null);
       }

      public void enqueue(int data){
    	  if(isEmpty()){
    		  Node current = new Node(data);
    		  front= rear = current;
    		  
    	  }
    	 Node current = new Node(data);
    	 // front is not kept under scope as only rear has to advance when new data is entered.
    
    	 rear.next= current;
    	 rear = current;
      }

    //The deque is not working the first time ..may be the reason is that it is moving from null to first.
      public void dequeue(){
    	
    	 if(!isEmpty()){
    		 
    		 front = front.next;
    		
    	 }
		
     }
     public void peekFront(){
    	 if(!isEmpty()){
    	    	System.out.println("Front value is " +front.data);
    	    }
    	
     }
     public void peekRear(){
    	 if(!isEmpty()){
    	    	System.out.println("Rear value is"+ rear.data);
    	    }
     }

}

